
RTC_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000776  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000776  0000080a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800074  00800074  0000081e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000081e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000850  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  0000088c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a5a  00000000  00000000  00000a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be1  00000000  00000000  00002496  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000103e  00000000  00000000  00003077  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000031c  00000000  00000000  000040b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005df  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011aa  00000000  00000000  000049b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000140  00000000  00000000  00005b5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e7       	ldi	r30, 0x76	; 118
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 02 	call	0x450	; 0x450 <main>
  8a:	0c 94 b9 03 	jmp	0x772	; 0x772 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <appInit>:
#include "App.h"
uint8_t arr[3];
uint8_t result[6];

void appInit(void){
	LCD_vInit();
  92:	0e 94 2c 01 	call	0x258	; 0x258 <LCD_vInit>
	LCD_vSendCmd(0x0C);		// To hide cursor
  96:	8c e0       	ldi	r24, 0x0C	; 12
  98:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
	LCD_vSendString("Welcome To RTC");
  9c:	80 e6       	ldi	r24, 0x60	; 96
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f e3       	ldi	r18, 0x3F	; 63
  a6:	8d e0       	ldi	r24, 0x0D	; 13
  a8:	93 e0       	ldi	r25, 0x03	; 3
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <appInit+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <appInit+0x22>
  b4:	00 00       	nop
	_delay_ms(1000);
	LCD_vSendCmd(clearScreen);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
	LCD_vSendString("Time");
  bc:	8f e6       	ldi	r24, 0x6F	; 111
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_vSendString>
	RTCInit();
  c4:	0e 94 b6 01 	call	0x36c	; 0x36c <RTCInit>
	RTCSetTime(0x21 , 0x15 , 0x00);
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	65 e1       	ldi	r22, 0x15	; 21
  cc:	81 e2       	ldi	r24, 0x21	; 33
  ce:	0e 94 ca 01 	call	0x394	; 0x394 <RTCSetTime>
	UART_vInit(9600);
  d2:	60 e8       	ldi	r22, 0x80	; 128
  d4:	75 e2       	ldi	r23, 0x25	; 37
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <UART_vInit>
  de:	2f e5       	ldi	r18, 0x5F	; 95
  e0:	8a ee       	ldi	r24, 0xEA	; 234
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <appInit+0x52>
  ec:	00 c0       	rjmp	.+0      	; 0xee <appInit+0x5c>
  ee:	00 00       	nop
  f0:	08 95       	ret

000000f2 <appStart>:
	_delay_ms(300);
}

void appStart(void){
  f2:	0f 93       	push	r16
  f4:	1f 93       	push	r17
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	LCD_moveCursor(2 , 1);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	0e 94 94 01 	call	0x328	; 0x328 <LCD_moveCursor>
	RTCGetTime(&arr[0] , &arr[1] , &arr[2]);
 102:	46 e7       	ldi	r20, 0x76	; 118
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	65 e7       	ldi	r22, 0x75	; 117
 108:	70 e0       	ldi	r23, 0x00	; 0
 10a:	84 e7       	ldi	r24, 0x74	; 116
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <RTCGetTime>
	
	/* Display data on Atmega32 LCD */
	sendPackedBCD(arr[0]);
 112:	04 e7       	ldi	r16, 0x74	; 116
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	f8 01       	movw	r30, r16
 118:	80 81       	ld	r24, Z
 11a:	0e 94 14 02 	call	0x428	; 0x428 <sendPackedBCD>
	LCD_vSendChar(':');
 11e:	8a e3       	ldi	r24, 0x3A	; 58
 120:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_vSendChar>
	sendPackedBCD(arr[1]);
 124:	f8 01       	movw	r30, r16
 126:	81 81       	ldd	r24, Z+1	; 0x01
 128:	0e 94 14 02 	call	0x428	; 0x428 <sendPackedBCD>
	LCD_vSendChar(':');
 12c:	8a e3       	ldi	r24, 0x3A	; 58
 12e:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_vSendChar>
	sendPackedBCD(arr[2]);
 132:	f8 01       	movw	r30, r16
 134:	82 81       	ldd	r24, Z+2	; 0x02
 136:	0e 94 14 02 	call	0x428	; 0x428 <sendPackedBCD>
	
	/* Converting Hours Into ASCII */
	result[0] = 0x30 + (arr[0] >> 4);
 13a:	f8 01       	movw	r30, r16
 13c:	90 81       	ld	r25, Z
 13e:	89 2f       	mov	r24, r25
 140:	82 95       	swap	r24
 142:	8f 70       	andi	r24, 0x0F	; 15
 144:	80 5d       	subi	r24, 0xD0	; 208
 146:	c7 e7       	ldi	r28, 0x77	; 119
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	88 83       	st	Y, r24
	result[1] = 0x30 + (arr[0] & 0x0F);
 14c:	9f 70       	andi	r25, 0x0F	; 15
 14e:	90 5d       	subi	r25, 0xD0	; 208
 150:	99 83       	std	Y+1, r25	; 0x01
	/* Converting Minutes Into ASCII */
	result[2] = 0x30 + (arr[1] >> 4);
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	29 2f       	mov	r18, r25
 156:	22 95       	swap	r18
 158:	2f 70       	andi	r18, 0x0F	; 15
 15a:	20 5d       	subi	r18, 0xD0	; 208
 15c:	2a 83       	std	Y+2, r18	; 0x02
	result[3] = 0x30 + (arr[1] & 0x0F);
 15e:	9f 70       	andi	r25, 0x0F	; 15
 160:	90 5d       	subi	r25, 0xD0	; 208
 162:	9b 83       	std	Y+3, r25	; 0x03
	/* Converting Seconds Into ASCII */
	result[4] = 0x30 + (arr[2] >> 4);
 164:	92 81       	ldd	r25, Z+2	; 0x02
 166:	29 2f       	mov	r18, r25
 168:	22 95       	swap	r18
 16a:	2f 70       	andi	r18, 0x0F	; 15
 16c:	20 5d       	subi	r18, 0xD0	; 208
 16e:	2c 83       	std	Y+4, r18	; 0x04
	result[5] = 0x30 + (arr[2] & 0x0F);
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	90 5d       	subi	r25, 0xD0	; 208
 174:	9d 83       	std	Y+5, r25	; 0x05
	
	/* Sending data to PIC16F877A using UART Protocol */
	/* Sending Hours */
	UART_vSendData(result[0]);
 176:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
	UART_vSendData(result[1]);
 17a:	89 81       	ldd	r24, Y+1	; 0x01
 17c:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
	/* Sending Minutes */
	UART_vSendData(result[2]);
 180:	8a 81       	ldd	r24, Y+2	; 0x02
 182:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
	UART_vSendData(result[3]);
 186:	8b 81       	ldd	r24, Y+3	; 0x03
 188:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
	/* Sending Seconds */
	UART_vSendData(result[4]);
 18c:	8c 81       	ldd	r24, Y+4	; 0x04
 18e:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
	UART_vSendData(result[5]);
 192:	8d 81       	ldd	r24, Y+5	; 0x05
 194:	0e 94 93 03 	call	0x726	; 0x726 <UART_vSendData>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <sendRisingEdge>:
 1a2:	41 e0       	ldi	r20, 0x01	; 1
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	82 e4       	ldi	r24, 0x42	; 66
 1a8:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 1ac:	8f e9       	ldi	r24, 0x9F	; 159
 1ae:	9f e0       	ldi	r25, 0x0F	; 15
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <sendRisingEdge+0xe>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <sendRisingEdge+0x14>
 1b6:	00 00       	nop
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	82 e4       	ldi	r24, 0x42	; 66
 1be:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 1c2:	8f e9       	ldi	r24, 0x9F	; 159
 1c4:	9f e0       	ldi	r25, 0x0F	; 15
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <sendRisingEdge+0x24>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <sendRisingEdge+0x2a>
 1cc:	00 00       	nop
 1ce:	08 95       	ret

000001d0 <LCD_vSendChar>:
 1d0:	cf 93       	push	r28
 1d2:	c8 2f       	mov	r28, r24
 1d4:	68 2f       	mov	r22, r24
 1d6:	62 95       	swap	r22
 1d8:	6f 70       	andi	r22, 0x0F	; 15
 1da:	81 e4       	ldi	r24, 0x41	; 65
 1dc:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_writeHighNibble>
 1e0:	41 e0       	ldi	r20, 0x01	; 1
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	82 e4       	ldi	r24, 0x42	; 66
 1e6:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 1ea:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <sendRisingEdge>
 1ee:	6c 2f       	mov	r22, r28
 1f0:	81 e4       	ldi	r24, 0x41	; 65
 1f2:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_writeHighNibble>
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	82 e4       	ldi	r24, 0x42	; 66
 1fc:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 200:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <sendRisingEdge>
 204:	8f ec       	ldi	r24, 0xCF	; 207
 206:	97 e0       	ldi	r25, 0x07	; 7
 208:	01 97       	sbiw	r24, 0x01	; 1
 20a:	f1 f7       	brne	.-4      	; 0x208 <LCD_vSendChar+0x38>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <LCD_vSendChar+0x3e>
 20e:	00 00       	nop
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <LCD_vSendCmd>:
 214:	cf 93       	push	r28
 216:	c8 2f       	mov	r28, r24
 218:	68 2f       	mov	r22, r24
 21a:	62 95       	swap	r22
 21c:	6f 70       	andi	r22, 0x0F	; 15
 21e:	81 e4       	ldi	r24, 0x41	; 65
 220:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_writeHighNibble>
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	82 e4       	ldi	r24, 0x42	; 66
 22a:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 22e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <sendRisingEdge>
 232:	6c 2f       	mov	r22, r28
 234:	81 e4       	ldi	r24, 0x41	; 65
 236:	0e 94 0d 03 	call	0x61a	; 0x61a <DIO_writeHighNibble>
 23a:	40 e0       	ldi	r20, 0x00	; 0
 23c:	62 e0       	ldi	r22, 0x02	; 2
 23e:	81 e4       	ldi	r24, 0x41	; 65
 240:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 244:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <sendRisingEdge>
 248:	8f ec       	ldi	r24, 0xCF	; 207
 24a:	97 e0       	ldi	r25, 0x07	; 7
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_vSendCmd+0x38>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_vSendCmd+0x3e>
 252:	00 00       	nop
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <LCD_vInit>:
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	81 ee       	ldi	r24, 0xE1	; 225
 260:	94 e0       	ldi	r25, 0x04	; 4
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <LCD_vInit+0xa>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <LCD_vInit+0x14>
 26c:	00 00       	nop
 26e:	c4 e0       	ldi	r28, 0x04	; 4
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	06 c0       	rjmp	.+12     	; 0x280 <LCD_vInit+0x28>
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	6c 2f       	mov	r22, r28
 278:	81 e4       	ldi	r24, 0x41	; 65
 27a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_vSetPinDir>
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	c8 30       	cpi	r28, 0x08	; 8
 282:	d1 05       	cpc	r29, r1
 284:	bc f3       	brlt	.-18     	; 0x274 <LCD_vInit+0x1c>
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	60 e0       	ldi	r22, 0x00	; 0
 28a:	82 e4       	ldi	r24, 0x42	; 66
 28c:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_vSetPinDir>
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	82 e4       	ldi	r24, 0x42	; 66
 296:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_vSetPinDir>
 29a:	41 e0       	ldi	r20, 0x01	; 1
 29c:	62 e0       	ldi	r22, 0x02	; 2
 29e:	82 e4       	ldi	r24, 0x42	; 66
 2a0:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_vSetPinDir>
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	82 e4       	ldi	r24, 0x42	; 66
 2aa:	0e 94 9d 02 	call	0x53a	; 0x53a <DIO_writePin>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	9e e4       	ldi	r25, 0x4E	; 78
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <LCD_vInit+0x60>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <LCD_vInit+0x66>
 2be:	00 00       	nop
 2c0:	88 e2       	ldi	r24, 0x28	; 40
 2c2:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 2c6:	8f ec       	ldi	r24, 0xCF	; 207
 2c8:	97 e0       	ldi	r25, 0x07	; 7
 2ca:	01 97       	sbiw	r24, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <LCD_vInit+0x72>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <LCD_vInit+0x78>
 2d0:	00 00       	nop
 2d2:	8e e0       	ldi	r24, 0x0E	; 14
 2d4:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 2d8:	8f ec       	ldi	r24, 0xCF	; 207
 2da:	97 e0       	ldi	r25, 0x07	; 7
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <LCD_vInit+0x84>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <LCD_vInit+0x8a>
 2e2:	00 00       	nop
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 2ea:	8f e1       	ldi	r24, 0x1F	; 31
 2ec:	9e e4       	ldi	r25, 0x4E	; 78
 2ee:	01 97       	sbiw	r24, 0x01	; 1
 2f0:	f1 f7       	brne	.-4      	; 0x2ee <LCD_vInit+0x96>
 2f2:	00 c0       	rjmp	.+0      	; 0x2f4 <LCD_vInit+0x9c>
 2f4:	00 00       	nop
 2f6:	86 e0       	ldi	r24, 0x06	; 6
 2f8:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 2fc:	8f ec       	ldi	r24, 0xCF	; 207
 2fe:	97 e0       	ldi	r25, 0x07	; 7
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <LCD_vInit+0xa8>
 304:	00 c0       	rjmp	.+0      	; 0x306 <LCD_vInit+0xae>
 306:	00 00       	nop
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	08 95       	ret

0000030e <LCD_vSendString>:
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
 312:	ec 01       	movw	r28, r24
 314:	03 c0       	rjmp	.+6      	; 0x31c <LCD_vSendString+0xe>
 316:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_vSendChar>
 31a:	21 96       	adiw	r28, 0x01	; 1
 31c:	88 81       	ld	r24, Y
 31e:	81 11       	cpse	r24, r1
 320:	fa cf       	rjmp	.-12     	; 0x316 <LCD_vSendString+0x8>
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <LCD_moveCursor>:
}

/* This method is used to move the cursor in a specific row and column */
void LCD_moveCursor(char row , char col){
	char data = 0;
	if(row > 2 || row < 1 || col > 16 || col < 1){
 328:	9f ef       	ldi	r25, 0xFF	; 255
 32a:	98 0f       	add	r25, r24
 32c:	92 30       	cpi	r25, 0x02	; 2
 32e:	70 f4       	brcc	.+28     	; 0x34c <LCD_moveCursor+0x24>
 330:	61 31       	cpi	r22, 0x11	; 17
 332:	70 f4       	brcc	.+28     	; 0x350 <LCD_moveCursor+0x28>
 334:	66 23       	and	r22, r22
 336:	71 f0       	breq	.+28     	; 0x354 <LCD_moveCursor+0x2c>
		data = 0x80;
	}else if(row == 1){
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	19 f4       	brne	.+6      	; 0x342 <LCD_moveCursor+0x1a>
		data = 0x80 + col - 1;
 33c:	8f e7       	ldi	r24, 0x7F	; 127
 33e:	86 0f       	add	r24, r22
 340:	0c c0       	rjmp	.+24     	; 0x35a <LCD_moveCursor+0x32>
	}else if(row == 2){
 342:	82 30       	cpi	r24, 0x02	; 2
 344:	49 f4       	brne	.+18     	; 0x358 <LCD_moveCursor+0x30>
		data = 0xC0 + col - 1;
 346:	8f eb       	ldi	r24, 0xBF	; 191
 348:	86 0f       	add	r24, r22
 34a:	07 c0       	rjmp	.+14     	; 0x35a <LCD_moveCursor+0x32>

/* This method is used to move the cursor in a specific row and column */
void LCD_moveCursor(char row , char col){
	char data = 0;
	if(row > 2 || row < 1 || col > 16 || col < 1){
		data = 0x80;
 34c:	80 e8       	ldi	r24, 0x80	; 128
 34e:	05 c0       	rjmp	.+10     	; 0x35a <LCD_moveCursor+0x32>
 350:	80 e8       	ldi	r24, 0x80	; 128
 352:	03 c0       	rjmp	.+6      	; 0x35a <LCD_moveCursor+0x32>
 354:	80 e8       	ldi	r24, 0x80	; 128
 356:	01 c0       	rjmp	.+2      	; 0x35a <LCD_moveCursor+0x32>
	_delay_ms(10);
}

/* This method is used to move the cursor in a specific row and column */
void LCD_moveCursor(char row , char col){
	char data = 0;
 358:	80 e0       	ldi	r24, 0x00	; 0
	}else if(row == 1){
		data = 0x80 + col - 1;
	}else if(row == 2){
		data = 0xC0 + col - 1;
	}
	LCD_vSendCmd(data);
 35a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_vSendCmd>
 35e:	8f ec       	ldi	r24, 0xCF	; 207
 360:	97 e0       	ldi	r25, 0x07	; 7
 362:	01 97       	sbiw	r24, 0x01	; 1
 364:	f1 f7       	brne	.-4      	; 0x362 <LCD_moveCursor+0x3a>
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_moveCursor+0x40>
 368:	00 00       	nop
 36a:	08 95       	ret

0000036c <RTCInit>:
#include "RTC.h"
#include "../LCD/LCD.h"
#include "../LCD/LCD_Config.h"

void RTCInit(void){
	I2CInit(100000);
 36c:	60 ea       	ldi	r22, 0xA0	; 160
 36e:	76 e8       	ldi	r23, 0x86	; 134
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 36 03 	call	0x66c	; 0x66c <I2CInit>
	I2CStart();
 378:	0e 94 4a 03 	call	0x694	; 0x694 <I2CStart>
	I2CWrite(0xD0);			// Address of DS1307 Chip
 37c:	80 ed       	ldi	r24, 0xD0	; 208
 37e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(0x07);			// Command Register Address
 382:	87 e0       	ldi	r24, 0x07	; 7
 384:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(0x00);			// Select First Address
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2C_stop();
 38e:	0e 94 62 03 	call	0x6c4	; 0x6c4 <I2C_stop>
 392:	08 95       	ret

00000394 <RTCSetTime>:
}

void RTCSetTime(uint8_t hour , uint8_t minute , uint8_t second){
 394:	1f 93       	push	r17
 396:	cf 93       	push	r28
 398:	df 93       	push	r29
 39a:	c8 2f       	mov	r28, r24
 39c:	d6 2f       	mov	r29, r22
 39e:	14 2f       	mov	r17, r20
	I2CStart();
 3a0:	0e 94 4a 03 	call	0x694	; 0x694 <I2CStart>
	I2CWrite(0xD0);			// Address of DS1307 Chip
 3a4:	80 ed       	ldi	r24, 0xD0	; 208
 3a6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(0x00);			// First address of register will be selected
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(second);		// 
 3b0:	81 2f       	mov	r24, r17
 3b2:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(minute);		// 
 3b6:	8d 2f       	mov	r24, r29
 3b8:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(hour);			// 
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2C_stop();
 3c2:	0e 94 62 03 	call	0x6c4	; 0x6c4 <I2C_stop>
}
 3c6:	df 91       	pop	r29
 3c8:	cf 91       	pop	r28
 3ca:	1f 91       	pop	r17
 3cc:	08 95       	ret

000003ce <RTCGetTime>:

void RTCGetTime(uint8_t *hour , uint8_t *minute , uint8_t *second){
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	ec 01       	movw	r28, r24
 3dc:	8b 01       	movw	r16, r22
 3de:	7a 01       	movw	r14, r20
	I2CStart();
 3e0:	0e 94 4a 03 	call	0x694	; 0x694 <I2CStart>
	I2CWrite(0xD0);			// Address of DS1307 Chip
 3e4:	80 ed       	ldi	r24, 0xD0	; 208
 3e6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	I2CWrite(0x00);			// First address of register will be selected
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	//I2C_stop();				// We stop here to be able to read after assigning the address
	
	I2CStart();				// Now we are in read mode
 3f0:	0e 94 4a 03 	call	0x694	; 0x694 <I2CStart>
	I2CWrite(0xD1);
 3f4:	81 ed       	ldi	r24, 0xD1	; 209
 3f6:	0e 94 50 03 	call	0x6a0	; 0x6a0 <I2CWrite>
	*second = I2CRead(1);
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2CRead>
 400:	f7 01       	movw	r30, r14
 402:	80 83       	st	Z, r24
	*minute = I2CRead(1);
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2CRead>
 40a:	f8 01       	movw	r30, r16
 40c:	80 83       	st	Z, r24
	*hour = I2CRead(0);		// We didn't need to return ACK because we don't need to read bytes anymore
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 57 03 	call	0x6ae	; 0x6ae <I2CRead>
 414:	88 83       	st	Y, r24
	I2C_stop();
 416:	0e 94 62 03 	call	0x6c4	; 0x6c4 <I2C_stop>
}
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	08 95       	ret

00000428 <sendPackedBCD>:

void sendPackedBCD(uint8_t data){
 428:	cf 93       	push	r28
 42a:	c8 2f       	mov	r28, r24
	LCD_vSendChar(0x30 + (data >> 4));
 42c:	82 95       	swap	r24
 42e:	8f 70       	andi	r24, 0x0F	; 15
 430:	80 5d       	subi	r24, 0xD0	; 208
 432:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_vSendChar>
 436:	89 ef       	ldi	r24, 0xF9	; 249
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	01 97       	sbiw	r24, 0x01	; 1
 43c:	f1 f7       	brne	.-4      	; 0x43a <sendPackedBCD+0x12>
 43e:	00 c0       	rjmp	.+0      	; 0x440 <sendPackedBCD+0x18>
 440:	00 00       	nop
	_delay_ms(1);
	LCD_vSendChar(0x30 + (data & 0x0F));
 442:	8c 2f       	mov	r24, r28
 444:	8f 70       	andi	r24, 0x0F	; 15
 446:	80 5d       	subi	r24, 0xD0	; 208
 448:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCD_vSendChar>
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <main>:
 */ 

#include "Application/App.h"

int main(void){
	appInit();
 450:	0e 94 49 00 	call	0x92	; 0x92 <appInit>
    while(1){
		appStart();
 454:	0e 94 79 00 	call	0xf2	; 0xf2 <appStart>
 458:	fd cf       	rjmp	.-6      	; 0x454 <main+0x4>

0000045a <DIO_vSetPinDir>:
			PORTC &= 0xF0;
			PORTC |= value;
			break;
		case 'D':
			PORTD &= 0xF0;
			PORTD |= value;
 45a:	82 34       	cpi	r24, 0x42	; 66
 45c:	19 f1       	breq	.+70     	; 0x4a4 <DIO_vSetPinDir+0x4a>
 45e:	18 f4       	brcc	.+6      	; 0x466 <DIO_vSetPinDir+0xc>
 460:	81 34       	cpi	r24, 0x41	; 65
 462:	39 f0       	breq	.+14     	; 0x472 <DIO_vSetPinDir+0x18>
 464:	08 95       	ret
 466:	83 34       	cpi	r24, 0x43	; 67
 468:	b1 f1       	breq	.+108    	; 0x4d6 <DIO_vSetPinDir+0x7c>
 46a:	84 34       	cpi	r24, 0x44	; 68
 46c:	09 f4       	brne	.+2      	; 0x470 <DIO_vSetPinDir+0x16>
 46e:	4c c0       	rjmp	.+152    	; 0x508 <DIO_vSetPinDir+0xae>
 470:	08 95       	ret
 472:	41 30       	cpi	r20, 0x01	; 1
 474:	59 f4       	brne	.+22     	; 0x48c <DIO_vSetPinDir+0x32>
 476:	2a b3       	in	r18, 0x1a	; 26
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_vSetPinDir+0x28>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_vSetPinDir+0x24>
 486:	82 2b       	or	r24, r18
 488:	8a bb       	out	0x1a, r24	; 26
 48a:	08 95       	ret
 48c:	2a b3       	in	r18, 0x1a	; 26
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	90 e0       	ldi	r25, 0x00	; 0
 492:	02 c0       	rjmp	.+4      	; 0x498 <DIO_vSetPinDir+0x3e>
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	6a 95       	dec	r22
 49a:	e2 f7       	brpl	.-8      	; 0x494 <DIO_vSetPinDir+0x3a>
 49c:	80 95       	com	r24
 49e:	82 23       	and	r24, r18
 4a0:	8a bb       	out	0x1a, r24	; 26
 4a2:	08 95       	ret
 4a4:	41 30       	cpi	r20, 0x01	; 1
 4a6:	59 f4       	brne	.+22     	; 0x4be <DIO_vSetPinDir+0x64>
 4a8:	27 b3       	in	r18, 0x17	; 23
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vSetPinDir+0x5a>
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vSetPinDir+0x56>
 4b8:	82 2b       	or	r24, r18
 4ba:	87 bb       	out	0x17, r24	; 23
 4bc:	08 95       	ret
 4be:	27 b3       	in	r18, 0x17	; 23
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	02 c0       	rjmp	.+4      	; 0x4ca <DIO_vSetPinDir+0x70>
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	6a 95       	dec	r22
 4cc:	e2 f7       	brpl	.-8      	; 0x4c6 <DIO_vSetPinDir+0x6c>
 4ce:	80 95       	com	r24
 4d0:	82 23       	and	r24, r18
 4d2:	87 bb       	out	0x17, r24	; 23
 4d4:	08 95       	ret
 4d6:	41 30       	cpi	r20, 0x01	; 1
 4d8:	59 f4       	brne	.+22     	; 0x4f0 <DIO_vSetPinDir+0x96>
 4da:	24 b3       	in	r18, 0x14	; 20
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <DIO_vSetPinDir+0x8c>
 4e2:	88 0f       	add	r24, r24
 4e4:	99 1f       	adc	r25, r25
 4e6:	6a 95       	dec	r22
 4e8:	e2 f7       	brpl	.-8      	; 0x4e2 <DIO_vSetPinDir+0x88>
 4ea:	82 2b       	or	r24, r18
 4ec:	84 bb       	out	0x14, r24	; 20
 4ee:	08 95       	ret
 4f0:	24 b3       	in	r18, 0x14	; 20
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_vSetPinDir+0xa2>
 4f8:	88 0f       	add	r24, r24
 4fa:	99 1f       	adc	r25, r25
 4fc:	6a 95       	dec	r22
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_vSetPinDir+0x9e>
 500:	80 95       	com	r24
 502:	82 23       	and	r24, r18
 504:	84 bb       	out	0x14, r24	; 20
 506:	08 95       	ret
 508:	41 30       	cpi	r20, 0x01	; 1
 50a:	59 f4       	brne	.+22     	; 0x522 <DIO_vSetPinDir+0xc8>
 50c:	21 b3       	in	r18, 0x11	; 17
 50e:	81 e0       	ldi	r24, 0x01	; 1
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_vSetPinDir+0xbe>
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	6a 95       	dec	r22
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_vSetPinDir+0xba>
 51c:	82 2b       	or	r24, r18
 51e:	81 bb       	out	0x11, r24	; 17
 520:	08 95       	ret
 522:	21 b3       	in	r18, 0x11	; 17
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <DIO_vSetPinDir+0xd4>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <DIO_vSetPinDir+0xd0>
 532:	80 95       	com	r24
 534:	82 23       	and	r24, r18
 536:	81 bb       	out	0x11, r24	; 17
 538:	08 95       	ret

0000053a <DIO_writePin>:
 53a:	82 34       	cpi	r24, 0x42	; 66
 53c:	19 f1       	breq	.+70     	; 0x584 <DIO_writePin+0x4a>
 53e:	18 f4       	brcc	.+6      	; 0x546 <DIO_writePin+0xc>
 540:	81 34       	cpi	r24, 0x41	; 65
 542:	39 f0       	breq	.+14     	; 0x552 <DIO_writePin+0x18>
 544:	08 95       	ret
 546:	83 34       	cpi	r24, 0x43	; 67
 548:	b1 f1       	breq	.+108    	; 0x5b6 <DIO_writePin+0x7c>
 54a:	84 34       	cpi	r24, 0x44	; 68
 54c:	09 f4       	brne	.+2      	; 0x550 <DIO_writePin+0x16>
 54e:	4c c0       	rjmp	.+152    	; 0x5e8 <DIO_writePin+0xae>
 550:	08 95       	ret
 552:	41 30       	cpi	r20, 0x01	; 1
 554:	59 f4       	brne	.+22     	; 0x56c <DIO_writePin+0x32>
 556:	2b b3       	in	r18, 0x1b	; 27
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <DIO_writePin+0x28>
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	6a 95       	dec	r22
 564:	e2 f7       	brpl	.-8      	; 0x55e <DIO_writePin+0x24>
 566:	82 2b       	or	r24, r18
 568:	8b bb       	out	0x1b, r24	; 27
 56a:	08 95       	ret
 56c:	2b b3       	in	r18, 0x1b	; 27
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_writePin+0x3e>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_writePin+0x3a>
 57c:	80 95       	com	r24
 57e:	82 23       	and	r24, r18
 580:	8b bb       	out	0x1b, r24	; 27
 582:	08 95       	ret
 584:	41 30       	cpi	r20, 0x01	; 1
 586:	59 f4       	brne	.+22     	; 0x59e <DIO_writePin+0x64>
 588:	28 b3       	in	r18, 0x18	; 24
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_writePin+0x5a>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_writePin+0x56>
 598:	82 2b       	or	r24, r18
 59a:	88 bb       	out	0x18, r24	; 24
 59c:	08 95       	ret
 59e:	28 b3       	in	r18, 0x18	; 24
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_writePin+0x70>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_writePin+0x6c>
 5ae:	80 95       	com	r24
 5b0:	82 23       	and	r24, r18
 5b2:	88 bb       	out	0x18, r24	; 24
 5b4:	08 95       	ret
 5b6:	41 30       	cpi	r20, 0x01	; 1
 5b8:	59 f4       	brne	.+22     	; 0x5d0 <DIO_writePin+0x96>
 5ba:	25 b3       	in	r18, 0x15	; 21
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_writePin+0x8c>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_writePin+0x88>
 5ca:	82 2b       	or	r24, r18
 5cc:	85 bb       	out	0x15, r24	; 21
 5ce:	08 95       	ret
 5d0:	25 b3       	in	r18, 0x15	; 21
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	02 c0       	rjmp	.+4      	; 0x5dc <DIO_writePin+0xa2>
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	6a 95       	dec	r22
 5de:	e2 f7       	brpl	.-8      	; 0x5d8 <DIO_writePin+0x9e>
 5e0:	80 95       	com	r24
 5e2:	82 23       	and	r24, r18
 5e4:	85 bb       	out	0x15, r24	; 21
 5e6:	08 95       	ret
 5e8:	41 30       	cpi	r20, 0x01	; 1
 5ea:	59 f4       	brne	.+22     	; 0x602 <DIO_writePin+0xc8>
 5ec:	22 b3       	in	r18, 0x12	; 18
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_writePin+0xbe>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_writePin+0xba>
 5fc:	82 2b       	or	r24, r18
 5fe:	82 bb       	out	0x12, r24	; 18
 600:	08 95       	ret
 602:	22 b3       	in	r18, 0x12	; 18
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <DIO_writePin+0xd4>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	6a 95       	dec	r22
 610:	e2 f7       	brpl	.-8      	; 0x60a <DIO_writePin+0xd0>
 612:	80 95       	com	r24
 614:	82 23       	and	r24, r18
 616:	82 bb       	out	0x12, r24	; 18
 618:	08 95       	ret

0000061a <DIO_writeHighNibble>:
	}
}

/* This method is used to write the four high pins of the atmega32 of a specific port register */
void DIO_writeHighNibble(unsigned char portName , unsigned char value){
	value <<= 4;
 61a:	62 95       	swap	r22
 61c:	60 7f       	andi	r22, 0xF0	; 240
	switch(portName){
 61e:	82 34       	cpi	r24, 0x42	; 66
 620:	81 f0       	breq	.+32     	; 0x642 <DIO_writeHighNibble+0x28>
 622:	18 f4       	brcc	.+6      	; 0x62a <DIO_writeHighNibble+0x10>
 624:	81 34       	cpi	r24, 0x41	; 65
 626:	31 f0       	breq	.+12     	; 0x634 <DIO_writeHighNibble+0x1a>
 628:	08 95       	ret
 62a:	83 34       	cpi	r24, 0x43	; 67
 62c:	89 f0       	breq	.+34     	; 0x650 <DIO_writeHighNibble+0x36>
 62e:	84 34       	cpi	r24, 0x44	; 68
 630:	b1 f0       	breq	.+44     	; 0x65e <DIO_writeHighNibble+0x44>
 632:	08 95       	ret
		case 'A':
			PORTA &= 0x0F;
 634:	8b b3       	in	r24, 0x1b	; 27
 636:	8f 70       	andi	r24, 0x0F	; 15
 638:	8b bb       	out	0x1b, r24	; 27
			PORTA |= value;
 63a:	8b b3       	in	r24, 0x1b	; 27
 63c:	68 2b       	or	r22, r24
 63e:	6b bb       	out	0x1b, r22	; 27
			break;
 640:	08 95       	ret
		case 'B':
			PORTB &= 0x0F;
 642:	88 b3       	in	r24, 0x18	; 24
 644:	8f 70       	andi	r24, 0x0F	; 15
 646:	88 bb       	out	0x18, r24	; 24
			PORTB |= value;
 648:	88 b3       	in	r24, 0x18	; 24
 64a:	68 2b       	or	r22, r24
 64c:	68 bb       	out	0x18, r22	; 24
			break;
 64e:	08 95       	ret
		case 'C':
			PORTC &= 0x0F;
 650:	85 b3       	in	r24, 0x15	; 21
 652:	8f 70       	andi	r24, 0x0F	; 15
 654:	85 bb       	out	0x15, r24	; 21
			PORTC |= value;
 656:	85 b3       	in	r24, 0x15	; 21
 658:	68 2b       	or	r22, r24
 65a:	65 bb       	out	0x15, r22	; 21
			break;
 65c:	08 95       	ret
		case 'D':
			PORTD &= 0x0F;
 65e:	82 b3       	in	r24, 0x12	; 18
 660:	8f 70       	andi	r24, 0x0F	; 15
 662:	82 bb       	out	0x12, r24	; 18
			PORTD |= value;
 664:	82 b3       	in	r24, 0x12	; 18
 666:	68 2b       	or	r22, r24
 668:	62 bb       	out	0x12, r22	; 18
 66a:	08 95       	ret

0000066c <I2CInit>:
 *  Author: sayed
 */ 

#include "I2C.h"

void I2CInit(uint32 SCL_Clock){
 66c:	9b 01       	movw	r18, r22
 66e:	ac 01       	movw	r20, r24
	TWBR = (uint8_t)(((F_CPU / SCL_Clock) - 16) / (2 * prescaler));
 670:	60 e4       	ldi	r22, 0x40	; 64
 672:	72 e4       	ldi	r23, 0x42	; 66
 674:	8f e0       	ldi	r24, 0x0F	; 15
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	0e 94 97 03 	call	0x72e	; 0x72e <__udivmodsi4>
 67c:	da 01       	movw	r26, r20
 67e:	c9 01       	movw	r24, r18
 680:	40 97       	sbiw	r24, 0x10	; 16
 682:	a1 09       	sbc	r26, r1
 684:	b1 09       	sbc	r27, r1
 686:	b6 95       	lsr	r27
 688:	a7 95       	ror	r26
 68a:	97 95       	ror	r25
 68c:	87 95       	ror	r24
 68e:	80 b9       	out	0x00, r24	; 0
	if(prescaler == 1){
		TWSR = 0;
 690:	11 b8       	out	0x01, r1	; 1
 692:	08 95       	ret

00000694 <I2CStart>:
		TWSR = 3;
	}
}

void I2CStart(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTA);
 694:	84 ea       	ldi	r24, 0xA4	; 164
 696:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);		// Wait to finish
 698:	06 b6       	in	r0, 0x36	; 54
 69a:	07 fe       	sbrs	r0, 7
 69c:	fd cf       	rjmp	.-6      	; 0x698 <I2CStart+0x4>
}
 69e:	08 95       	ret

000006a0 <I2CWrite>:

void I2CWrite(uint8_t data){
	TWDR = data;
 6a0:	83 b9       	out	0x03, r24	; 3
	TWCR = (1 << TWINT) | (1 << TWEN);
 6a2:	84 e8       	ldi	r24, 0x84	; 132
 6a4:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);		// Wait to finish
 6a6:	06 b6       	in	r0, 0x36	; 54
 6a8:	07 fe       	sbrs	r0, 7
 6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <I2CWrite+0x6>
}
 6ac:	08 95       	ret

000006ae <I2CRead>:

uint8_t I2CRead(uint8_t ack){
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA);
 6ae:	20 e4       	ldi	r18, 0x40	; 64
 6b0:	82 9f       	mul	r24, r18
 6b2:	c0 01       	movw	r24, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	84 68       	ori	r24, 0x84	; 132
 6b8:	86 bf       	out	0x36, r24	; 54
	while((TWCR & (1 << TWINT)) == 0);
 6ba:	06 b6       	in	r0, 0x36	; 54
 6bc:	07 fe       	sbrs	r0, 7
 6be:	fd cf       	rjmp	.-6      	; 0x6ba <I2CRead+0xc>
	return TWDR;
 6c0:	83 b1       	in	r24, 0x03	; 3
}
 6c2:	08 95       	ret

000006c4 <I2C_stop>:

void I2C_stop(void){
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
 6c4:	84 e9       	ldi	r24, 0x94	; 148
 6c6:	86 bf       	out	0x36, r24	; 54
	for(int i = 0; i < 100; i++);
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <I2C_stop+0xc>
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	84 36       	cpi	r24, 0x64	; 100
 6d2:	91 05       	cpc	r25, r1
 6d4:	e4 f3       	brlt	.-8      	; 0x6ce <I2C_stop+0xa>
 6d6:	08 95       	ret

000006d8 <UART_vInit>:
#include "uart.h"

void UART_vInit(uint32 baud){
	/*1 - Choose baud rate that will be used by sender and receiver by writing to UBRRL/UBRRH*/
	uint16 UBRR ;
	UBRR=(F_CPU/(16*baud))-1 ;
 6d8:	dc 01       	movw	r26, r24
 6da:	cb 01       	movw	r24, r22
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	aa 1f       	adc	r26, r26
 6e2:	bb 1f       	adc	r27, r27
 6e4:	88 0f       	add	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	aa 1f       	adc	r26, r26
 6ea:	bb 1f       	adc	r27, r27
 6ec:	9c 01       	movw	r18, r24
 6ee:	ad 01       	movw	r20, r26
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	44 1f       	adc	r20, r20
 6f6:	55 1f       	adc	r21, r21
 6f8:	22 0f       	add	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	44 1f       	adc	r20, r20
 6fe:	55 1f       	adc	r21, r21
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	72 e1       	ldi	r23, 0x12	; 18
 704:	8a e7       	ldi	r24, 0x7A	; 122
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 97 03 	call	0x72e	; 0x72e <__udivmodsi4>
 70c:	21 50       	subi	r18, 0x01	; 1
 70e:	31 09       	sbc	r19, r1
	UBRRH=(uint8_t)(UBRR>>8);
 710:	30 bd       	out	0x20, r19	; 32
	UBRRL=(uint8_t)UBRR;
 712:	29 b9       	out	0x09, r18	; 9
	/*2 - Enable USART Sender & Receiver*/
	SET_BIT(UCSRB,TXEN);
 714:	8a b1       	in	r24, 0x0a	; 10
 716:	88 60       	ori	r24, 0x08	; 8
 718:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 71a:	8a b1       	in	r24, 0x0a	; 10
 71c:	80 61       	ori	r24, 0x10	; 16
 71e:	8a b9       	out	0x0a, r24	; 10
	/*3 - Choose number of data bits to be sent,parity and stop bits from UCSRC
	, We will work with 8 bits data,1 stop bit and no parity bits*/
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
 720:	86 e8       	ldi	r24, 0x86	; 134
 722:	80 bd       	out	0x20, r24	; 32
 724:	08 95       	ret

00000726 <UART_vSendData>:
}

void UART_vSendData(char data){
	/*Wait for UDR transmit buffer to be empty*/
	while(READ_BIT(UCSRA,UDRE)==0);
 726:	5d 9b       	sbis	0x0b, 5	; 11
 728:	fe cf       	rjmp	.-4      	; 0x726 <UART_vSendData>
	/*Put data to UDR transmit buffer transmit*/
	UDR=data ;
 72a:	8c b9       	out	0x0c, r24	; 12
 72c:	08 95       	ret

0000072e <__udivmodsi4>:
 72e:	a1 e2       	ldi	r26, 0x21	; 33
 730:	1a 2e       	mov	r1, r26
 732:	aa 1b       	sub	r26, r26
 734:	bb 1b       	sub	r27, r27
 736:	fd 01       	movw	r30, r26
 738:	0d c0       	rjmp	.+26     	; 0x754 <__udivmodsi4_ep>

0000073a <__udivmodsi4_loop>:
 73a:	aa 1f       	adc	r26, r26
 73c:	bb 1f       	adc	r27, r27
 73e:	ee 1f       	adc	r30, r30
 740:	ff 1f       	adc	r31, r31
 742:	a2 17       	cp	r26, r18
 744:	b3 07       	cpc	r27, r19
 746:	e4 07       	cpc	r30, r20
 748:	f5 07       	cpc	r31, r21
 74a:	20 f0       	brcs	.+8      	; 0x754 <__udivmodsi4_ep>
 74c:	a2 1b       	sub	r26, r18
 74e:	b3 0b       	sbc	r27, r19
 750:	e4 0b       	sbc	r30, r20
 752:	f5 0b       	sbc	r31, r21

00000754 <__udivmodsi4_ep>:
 754:	66 1f       	adc	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	88 1f       	adc	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	1a 94       	dec	r1
 75e:	69 f7       	brne	.-38     	; 0x73a <__udivmodsi4_loop>
 760:	60 95       	com	r22
 762:	70 95       	com	r23
 764:	80 95       	com	r24
 766:	90 95       	com	r25
 768:	9b 01       	movw	r18, r22
 76a:	ac 01       	movw	r20, r24
 76c:	bd 01       	movw	r22, r26
 76e:	cf 01       	movw	r24, r30
 770:	08 95       	ret

00000772 <_exit>:
 772:	f8 94       	cli

00000774 <__stop_program>:
 774:	ff cf       	rjmp	.-2      	; 0x774 <__stop_program>
